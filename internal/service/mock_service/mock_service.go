// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	stock "github.com/marcosvliras/no-name/stock"
)

// MockISVC is a mock of ISVC interface.
type MockISVC struct {
	ctrl     *gomock.Controller
	recorder *MockISVCMockRecorder
}

// MockISVCMockRecorder is the mock recorder for MockISVC.
type MockISVCMockRecorder struct {
	mock *MockISVC
}

// NewMockISVC creates a new mock instance.
func NewMockISVC(ctrl *gomock.Controller) *MockISVC {
	mock := &MockISVC{ctrl: ctrl}
	mock.recorder = &MockISVCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISVC) EXPECT() *MockISVCMockRecorder {
	return m.recorder
}

// GetStockData mocks base method.
func (m *MockISVC) GetStockData(data []string) []stock.AggStockData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockData", data)
	ret0, _ := ret[0].([]stock.AggStockData)
	return ret0
}

// GetStockData indicates an expected call of GetStockData.
func (mr *MockISVCMockRecorder) GetStockData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockData", reflect.TypeOf((*MockISVC)(nil).GetStockData), data)
}
